% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/plot_latency_full.R
\name{plot_full_run}
\alias{plot_full_run}
\title{Plot the Complete Duration of All Stages for a Given Run}
\usage{
plot_full_run(
  df,
  unique_params,
  facet_by = "recipe",
  fill_by = "system",
  drop_stages = c(),
  postgis_sel_ingest_dur_type = "full",
  use_warm = T,
  recipe_order = c(),
  NA_x_height = 2,
  fill_by_palette = c()
)
}
\arguments{
\item{df}{the dataframe prepared by the prepare_timings_data_comparison() function}

\item{unique_params}{the set of unique parameters that shall be displayed on the x axis}

\item{facet_by}{the column (usually a parameter column) to facet the graph on,defaults to no facets}

\item{fill_by}{the column (usually a parameter column) determining the fill color of the bars or lines, defaults to `system`}

\item{drop_stages}{a character vector of stages notto take into account}

\item{postgis_sel_ingest_dur_type}{the postgis ingestion type to use}

\item{use_warm}{whether to use warm or cold starts for the execution stage, defaults to `TRUE`}

\item{recipe_order}{the order of the recipes within the graph}

\item{NA_x_height}{the y position of the "ðŸ—™" indicating a failed run, defaults to `2`}

\item{fill_by_palette}{the color palette the bars shall be filled with, defaults to the ggplot2 standard palette}
}
\value{
a ggplot2 plot
}
\description{
This is the other main drawing function for ST_Benchi. It takes a dataframe prepared by the
prepare_timings_data_comparison() function and can plot a wide variety of comparisons
depending on the set of parameters supplied. Different to the `plot_stage_comparison()` function,
this function can aggregate multiple stages into a single stacked bar plot.
}
\details{
The function can group and facet the graph by different parameters.

If a run fails to complete (e.g. due to a timeout or error), the function will draw
an "ðŸ—™" slightly above the bar of the failed run.
}
\examples{
#' library(RColorBrewer)
systems_colors <- setNames(brewer.pal(n=5, name="Accent"),
  c("beast", "heavyAI", "postgis", "rasdaman", "sedona"))

plot_full_run(
  df,
  unique_params = c("system", "recipe"),
  facet_by = "recipe",
  drop_stages = c("preprocess"),
  recipe_order = some_recipe_order,
  fill_by_palette = systems_colors
)
}
